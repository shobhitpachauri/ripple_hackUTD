import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { PropagateLoader } from 'react-spinners';
import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL;

function FileUpload() {
  const navigate = useNavigate();
  const [localUploaded, setLocalUploaded] = useState(false);
  const [cloudFile, setCloudFile] = useState('');
  const [localFile, setLocalFile] = useState(null);
  const [loading, setLoading] = useState(false);

  const isValidFileType = (file) => {
    const validTypes = [
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    ];
    return validTypes.includes(file.type);
  };

  const handleFileUpload = (event, setUploadedState, setFileState) => {
    const file = event.target.files[0];
    if (file) {
      if (isValidFileType(file)) {
        setUploadedState(true);
        setFileState(file);
      } else {
        toast.error('Please upload a PDF or Word document.');
        event.target.value = null;
        setUploadedState(false);
      }
    } else {
      setUploadedState(false);
    }
  };

  const handleLocalUpload = (event) => {
    handleFileUpload(event, setLocalUploaded, setLocalFile);
  };

  const allFilesUploaded = localUploaded && cloudFile.trim().length > 0;

  const handleContinue = async () => {
    if (allFilesUploaded) {
      const formData = new FormData();
      formData.append('file1', localFile);
      const textBlob = new Blob([cloudFile], { type: 'text/plain' });
      formData.append('file2', new File([textBlob], 'cloudDetails.txt', { type: 'text/plain' }));

      setLoading(true);

      try {
        const response = await axios.post(`${API_URL}upload/`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });

        if (response.status !== 200) {
          throw new Error('Failed to upload files');
        }

        const data = response.data;

        navigate('/filesPreview', { state: { data, localFile, cloudFile } });
      } catch (error) {
        toast.error('An error occurred while uploading files.');
        console.error('Error:', error);
      } finally {
        setLoading(false);
      }
    }
  };

  const resetForm = () => {
    setLocalFile(null);
    setLocalUploaded(false);
    setCloudFile('');
    window.location.reload();
  };

  return (
    <div className="flex flex-col bg-orange-300 min-h-screen justify-center items-center p-4 md:pl-3.5 md:pr-3.5">
      {/* Navbar */}
      <div className="navbar bg-white fixed top-0 left-0 w-full z-50">
        <div className="navbar-start">
          <a href="/" className="text-lg pl-16 pt-1 text-burgundy">FileUploader</a>
        </div>

        <div className="navbar-end hidden md:flex text-red-950 md:pr-16">
          <ul className="menu menu-horizontal text-black">
            <li className="subscription pr-4">
              <a href="/" className="nav-link hover:text-red-950">File Matcher</a>
            </li>
          </ul>
        </div>
      </div>

      {/* Loading screen */}
      {loading ? (
        <div className="flex flex-col items-center justify-center min-h-screen">
          <PropagateLoader color="#FE8529" loading={loading} size={15} />
          <p className="text-black mt-4">Uploading files, please wait...</p>
        </div>
      ) : (
        <>
          <div className="flex flex-col md:flex-row justify-end mt-8 w-full max-w-5xl px-4">
            <div className="flex justify-center text-md1 font-md text-black md:mr-8">
              Upload your Local file and paste Cloud details
            </div>

            <button
              className="btn btn-outline border-burgundy text-red-950 mr-4 md:ml-4 mb-2 md:mb-0 hover:bg-red-950 hover:text-white"
              onClick={resetForm}
            >
              Reset
            </button>
            <button
              className={`btn border-black hover:text-white hover:bg-black text-charcoal ${allFilesUploaded ? 'bg-transparent' : 'btn-disabled glass bg-black'}`}
              disabled={!allFilesUploaded}
              tabIndex={!allFilesUploaded ? -1 : 0}
              role="button"
              aria-disabled={!allFilesUploaded}
              onClick={handleContinue}
            >
              Next
            </button>
          </div>

          <div className="flex flex-col md:flex-row w-full justify-between max-w-5xl mt-8">
            {/* Local file upload container */}
            <div className="flex flex-col items-center p-6 bg-white rounded-xl w-full md:w-1/2 mb-4 md:mb-0 md:mr-4 shadow-lg">
              <h3 className="mb-4 text-black text-center">Upload your Local file here!</h3>
              <input
                type="file"
                className="file-input file-input-bordered file-input-md w-full bg-transparent text-charcoal border-burgundy mb-4"
                onChange={handleLocalUpload}
              />
              <h6 className="mt-2 text-burgundy text-opacity-35 text-sm text-center">
                PDF and Word formats are accepted for upload. Max 15MB each.
              </h6>
            </div>

            {/* Cloud details container */}
            <div className="flex flex-col items-center p-6 bg-white rounded-xl w-full md:w-1/2 shadow-lg">
              <h3 className="mb-4 text-charcoal text-center">Paste Cloud Details</h3>
              <textarea
                id="cloud-details-text"
                placeholder="Type here"
                className="textarea w-full bg-transparent border-burgundy p-2"
                style={{ height: '250px' }} // Increased height
                onChange={(e) => setCloudFile(e.target.value)}
                value={cloudFile || ''}
              />
            </div>
          </div>
        </>
      )}
    </div>
  );
}

export default FileUpload;
